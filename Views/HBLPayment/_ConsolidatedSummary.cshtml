@using Pension.Entities.Helpers
@model PensionSystem.ViewModels.ConsolidatedSummaryModel

@if (Model != null && Model.HBLPayments != null && Model.Session != null && Model.AllPensioners != null && Model.Months != null)
{

    var monthlyTotal = new Dictionary<int, decimal>();
    decimal yearlyGrandTotal = 0;
    <div class="row">
        <div id="table-header">
            <div class="container">

                <div class="row">
                    <div class="col-12">
                        <h4 class="text-center">@Model.Session.DMStamp @Model.Session.BaseStamp</h4>
                        <h5 class="text-center">List Of Pensioner upto @UserFormat.GetMonthYear(Model.Months.OrderBy(x => x.Month).Last().Month)</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">

        <div class="col-md-12">
            <table class="table" id="data-table">
                <thead>
                    <tr>
                        <th>PPO</th>
                        <th>Claimant</th>
                        @foreach (var month in Model.Months)
                        {
                            <th>@month.Month.ToString("MM-yyyy")</th>
                        }
                        <th>G.Total</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var pensioner in Model.AllPensioners)
                    {
                        decimal yearlyTotal = 0;
                        <tr>
                            <td>@pensioner.PPOSystem</td>
                            <td>@pensioner.Claimant</td>
                            @foreach (var month in Model.Months)
                            {
                                decimal monthlyTotalAmount = 0;
                                var monthKey = month.Month.Month + (month.Month.Year * 100); // Unique key for year+month.

                                // Monthly Payments
                                var payment = Model.HBLPayments.FirstOrDefault(x => x.PensionerId == pensioner.PensionerId &&
                                x.Month.Month == month.Month.Month &&
                                x.Month.Year == month.Month.Year);
                                if (payment != null)
                                    monthlyTotalAmount += payment.Total;

                                // Arrears
                                if (Model.HBLArrears != null)
                                    monthlyTotalAmount += Model.HBLArrears.Where(x => x.PensionerId == pensioner.PensionerId &&
                                    x.Month.Month == month.Month.Month &&
                                    x.Month.Year == month.Month.Year)
                                    .Sum(x => x.Amount);

                                // Commutations
                                if (Model.Commutations != null)
                                    monthlyTotalAmount += Model.Commutations.Where(x => x.PensionerId == pensioner.PensionerId &&
                                    x.Month.Month == month.Month.Month &&
                                    x.Month.Year == month.Month.Year)
                                    .Sum(x => x.Amount);

                                yearlyTotal += monthlyTotalAmount;
                                monthlyTotal[monthKey] = monthlyTotal.GetValueOrDefault(monthKey, 0) + monthlyTotalAmount;

                                <td>@UserFormat.GetAmount(monthlyTotalAmount)</td>
                            }
                            <td>@UserFormat.GetAmount(yearlyTotal)</td>
                        </tr>
                    }


                    @if (Model.BankCharges != null && Model.BankCharges.Any())
                    {
                        decimal totalBankCharges = 0;

                        <tr>
                            <td>Bank Charges</td>
                            <td></td>
                            @foreach (var month in Model.Months)
                            {
                                var monthKey = month.Month.Month + (month.Month.Year * 100); // Same key for year+month.
                                var bankCharge = Model.BankCharges.Where(x => x.Month.Month == month.Month.Month &&
                                x.Month.Year == month.Month.Year)
                                .Sum(x => x.Charges);
                                totalBankCharges += bankCharge;
                                monthlyTotal[monthKey] = monthlyTotal.GetValueOrDefault(monthKey, 0) + bankCharge;

                                <td>@UserFormat.GetAmount(bankCharge)</td>
                            }
                            <td>@UserFormat.GetAmount(totalBankCharges)</td>
                        </tr>
                    }


                    <tr>
                        <td>Total</td>
                        <td></td>
                        @foreach (var month in Model.Months)
                        {
                            var monthKey = month.Month.Month + (month.Month.Year * 100); // Same key for year+month.
                            yearlyGrandTotal += monthlyTotal.GetValueOrDefault(monthKey, 0);

                            <td class="text-bold text-lg">@UserFormat.GetAmount(monthlyTotal.GetValueOrDefault(monthKey, 0))</td>
                        }
                        <td>@UserFormat.GetAmount(yearlyGrandTotal)</td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
    <div id="table-footer">
        <div class="container" style="margin-top: 70px;">
            <div class="row">
                <div class="col-6">
                    <p class="text-center">@Model.Session.AMStamp</p>
                    <p class="text-center" style="margin-top: -20px;">@Model.Session.BaseStamp</p>
                </div>
                <div class="col-6">
                    <div>
                        <p class="text-center">@Model.Session.DMStamp</p>
                        <p class="text-center" style="margin-top: -20px;">@Model.Session.BaseStamp</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
                $(document).ready(function () {
            $('#data-table').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'print',
                        footer: true,
                        customize: function (win) {
                            $(win.document.body).prepend($("#table-header").html()); //after the table
                            $(win.document.body).append($("#table-footer").html()); //after the table
                            $(win.document.body).find('table').addClass('compact').css('font-size', 'inherit');
                            var css = '@@page { size: landscape; }', head = win.document.head || win.document.getElementsByTagName('head')[0], style = win.document.createElement('style');
                            style.type = 'text/css';
                            style.media = 'print';
                            if (style.styleSheet) {
                                style.styleSheet.cssText = css;
                            }
                            else {
                                style.appendChild(win.document.createTextNode(css));
                            }
                            head.appendChild(style);
                        },
                        title: '',
                        message: '',
                    },
                    'excel',
                    'copy',
                    'csv',
                    'pdf'
                ],
                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": false,
                "info": true,
            });
        });
    </script>
}

