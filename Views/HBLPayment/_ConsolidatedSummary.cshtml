@using Pension.Entities.Helpers
@model PensionSystem.ViewModels.ConsolidatedSummaryModel

@if (Model != null && Model.HBLPayments != null && Model.Session != null && Model.AllPensioners != null && Model.Months != null)
{

    var monthlyTotal = new Dictionary<int, decimal>();
    decimal yearlyGrandTotal = 0;

    <div class="row">
        <div class="col-md-12">
            <table class="table" id="data-table">
                <thead>
                    <tr>
                        <th>PPO</th>
                        <th>Claimant</th>
                            @foreach (var month in Model.Months)
                            {
                                <th>@month.Month.ToString("MM-yyyy")</th>
                            }
                        <th>G.Total</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var pensioner in Model.AllPensioners)
                    {
                        decimal yearlyTotal = 0;
                        <tr>
                            <td>@pensioner.PPOSystem</td>
                            <td>@pensioner.Claimant</td>
                            @foreach (var month in Model.Months)
                            {
                                decimal monthlyTotalAmount = 0;
                                var monthKey = month.Month.Month + (month.Month.Year * 100); // Unique key for year+month.

                                // Monthly Payments
                                var payment = Model.HBLPayments.FirstOrDefault(x => x.PensionerId == pensioner.PensionerId &&
                                x.Month.Month == month.Month.Month &&
                                x.Month.Year == month.Month.Year);
                                if (payment != null)
                                    monthlyTotalAmount += payment.Total;

                                // Arrears
                                if (Model.HBLArrears != null)
                                    monthlyTotalAmount += Model.HBLArrears.Where(x => x.PensionerId == pensioner.PensionerId &&
                                    x.Month.Month == month.Month.Month &&
                                    x.Month.Year == month.Month.Year)
                                    .Sum(x => x.Amount);

                                // Commutations
                                if (Model.Commutations != null)
                                    monthlyTotalAmount += Model.Commutations.Where(x => x.PensionerId == pensioner.PensionerId &&
                                    x.Month.Month == month.Month.Month &&
                                    x.Month.Year == month.Month.Year)
                                    .Sum(x => x.Amount);

                                yearlyTotal += monthlyTotalAmount;
                                monthlyTotal[monthKey] = monthlyTotal.GetValueOrDefault(monthKey, 0) + monthlyTotalAmount;

                                <td>@UserFormat.GetAmount(monthlyTotalAmount)</td>
                            }
                            <td>@UserFormat.GetAmount(yearlyTotal)</td>
                        </tr>
                    }

                   
                    @if (Model.BankCharges != null && Model.BankCharges.Any())
                    {
                        decimal totalBankCharges = 0;

                        <tr>
                            <td>Bank Charges</td>
                            <td></td>
                            @foreach (var month in Model.Months)
                            {
                                var monthKey = month.Month.Month + (month.Month.Year * 100); // Same key for year+month.
                                var bankCharge = Model.BankCharges.Where(x => x.Month.Month == month.Month.Month &&
                                x.Month.Year == month.Month.Year)
                                .Sum(x => x.Charges);
                                totalBankCharges += bankCharge;
                                monthlyTotal[monthKey] = monthlyTotal.GetValueOrDefault(monthKey, 0) + bankCharge;

                                <td>@UserFormat.GetAmount(bankCharge)</td>
                            }
                            <td>@UserFormat.GetAmount(totalBankCharges)</td>
                        </tr>
                    }

                
                    <tr>
                        <td>Total</td>
                        <td></td>
                        @foreach (var month in Model.Months)
                        {
                            var monthKey = month.Month.Month + (month.Month.Year * 100); // Same key for year+month.
                            yearlyGrandTotal += monthlyTotal.GetValueOrDefault(monthKey, 0);

                            <td class="text-bold text-lg">@UserFormat.GetAmount(monthlyTotal.GetValueOrDefault(monthKey, 0))</td>
                        }
                        <td>@UserFormat.GetAmount(yearlyGrandTotal)</td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
    <script>
        $('#data-table').DataTable({
            dom: 'Bfrtip',
            buttons: ['print', 'excel', 'copy', 'csv', 'pdf'],
            paging: true,
            searching: true,
            responsive: true
        });
    </script>
}

